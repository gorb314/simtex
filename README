simtex - simple text preprocessing tool

Defines a couple of functions for both specifying and replacing
tokens inside a body of text.
The identifying marks on the tokens themselves are easily escaped,
allowing the processing to deal with natural occurences of these
markers smoothly.

$KEY
$(KEY)
	Inserts the value of the key with name "KEY" into the text.
Example:
	if a key MYKEY exists with the value 1234, then this text
	$MYKEY
	in the input will produce output that looks like
	1234
	
$def KEY VALUE
	Defines a KEY with a specified VALUE.
	Note that KEY is a single word, while VALUE may contain spaces.
	KEY and VALUE may contain other keys.
Example:
	$def mykey value 1234
	Creates a key called "mykey", with the value "value 1234".
	$def key1 key2
	This defines a key called "key1", with a value key2
	$def $key1 value2
	This defines a key called "key2" (the value of key1!), with a value of value2
	$def $key1 $key1
	This defines a key "key2" with a value "key2"
Note: definitions are not recursive. They are done on the spot, which
is why the above example functions.

$include FILENAME
	Includes the processed text of FILENAME.
	All definitions made in FILENAME are retained.

$import FILENAME
	Processes FILENAME, but discards its output/
	All definitions made in FILENAME are retained.
	
$inherit FILENAME
	Uses the definitions and output of the current file as "specialisations"
	of the definitions and output of the inherited (base) FILENAME.
	The output of the current file may be used in the base FILENAME as the
	special key $DERIVED.
Note:
	The base file may itself specify $inherit, which implies that it too
	has a base file, for which it specialises definitions and output.
	Again, its output is available to its base as $DERIVED
	
$ifdef KEY
$endif
	Basic ifdef support. Ignores everything between $ifdef and $endif 
	if key is not defined.

TODO: add support for
multiline $def			: handle block defs
$undef ... ???			: remove the def of key. Does this dig deep? shallow? does it propagate?
$override ... 			: overrides the definition of key in a base context
$if ... / $endif		: complex if support. we require some more functions to handle this? true/false?
	$eq 				: returns "true" if key == value ??
	$defined			: returns "true" if key is defined ??
	$not				: returns "true" if value is not "true" ??
	$and				: returns "true" if all keys are "true" ??
	$or					: returns "true" if any keys are "true" ??

